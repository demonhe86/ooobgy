/*
 * Generated by MyEclipse Struts
 * Template path: templates/java/JavaClass.vtl
 */
package com.ooobgy.ifnote.struts.form;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpSession;

import org.apache.struts.action.ActionErrors;
import org.apache.struts.action.ActionForm;
import org.apache.struts.action.ActionMapping;
import org.apache.struts.action.ActionMessage;

import com.ooobgy.ifnote.constants.SecretKey;
import com.ooobgy.ifnote.dbctrler.dao.Inote_DepositDao;
import com.ooobgy.ifnote.dbctrler.dao.Inote_FundDao;
import com.ooobgy.ifnote.dbctrler.daoimpl.Inote_DepositDaoImpl;
import com.ooobgy.ifnote.dbctrler.daoimpl.Inote_FundDaoImpl;
import com.ooobgy.ifnote.entity.Inote_Deposit;
import com.ooobgy.ifnote.entity.Inote_Fund;
import com.ooobgy.ifnote.entity.User;

/** 
 * MyEclipse Struts
 * Creation date: 08-17-2011
 * 
 * XDoclet definition:
 * @struts.form name="noteFundForm"
 */
public class NoteFundForm extends ActionForm {
	/*
	 * Generated fields
	 */

	/**
	 * 
	 */
	private static final long serialVersionUID = -7140554928646826357L;

	/** fund_code property */
	private String fund_code;

	/** count property */
	private String count;

	/** npv property */
	private String npv;

	/** comment property */
	private String comment;

	/*
	 * Generated Methods
	 */

	/** 
	 * Method validate
	 * @param mapping
	 * @param request
	 * @return ActionErrors
	 */
	public ActionErrors validate(ActionMapping mapping,
			HttpServletRequest request) {
		ActionErrors errors = new ActionErrors();
		
		try {
			if(Integer.parseInt(count) < 0){
				throw new IllegalArgumentException();
			}
		} catch (Throwable e) {
			ActionMessage actionMessage = new ActionMessage("error.count");
			errors.add("count", actionMessage);
			return errors;
		}
		
		try {
			if(Double.parseDouble(npv) < 0){
				throw new IllegalArgumentException();
			}
		} catch (Throwable e) {
			ActionMessage actionMessage = new ActionMessage("error.npv");
			errors.add("npv", actionMessage);
			return errors;
		}
		
		try {
			if(Integer.parseInt(fund_code) < 0){
				throw new IllegalArgumentException();
			}
		} catch (Throwable e) {
			ActionMessage actionMessage = new ActionMessage("error.fund_code");
			errors.add("fund_code", actionMessage);
			return errors;
		}
		return errors;
	}

	/** 
	 * Method reset
	 * @param mapping
	 * @param request
	 */
	public void reset(ActionMapping mapping, HttpServletRequest request) {
		String idStr = (String) request.getParameter("nid");
		if (idStr != null && idStr.length() > 0) {
			try {
				Integer id = Integer.parseInt(idStr);
				Inote_Fund inote = initInote(id);
				HttpSession session = request.getSession();
				User user = (User)session.getAttribute(SecretKey.USER_KEY);
				if (user != null && inote != null) {
					if (user.getId() == inote.getUser_id()) {
						this.comment = inote.getComment();
						this.count = inote.getCount().toString();
						this.fund_code = inote.getFund_code().toString();
						this.npv = inote.getNpv().toString();
						session.setAttribute("inote_fund", inote);
						return;
					} else {
						initBlankInote();
					}
				}
				initBlankInote();
				
				return;
			} catch (Throwable e) {
				//Do nothing,转入初始化空白Bean的操作
			}
		}
		
		initBlankInote();
	}

	private Inote_Fund initInote(Integer id) {
		Inote_FundDao dao = new Inote_FundDaoImpl();
		Inote_Fund inote = dao.findWithId(id);
		
		if (inote.getId() == null) {
			return null;
		} else {
			return inote;
		}
	}

	private void initBlankInote() {
		this.comment = "";
		this.count = "0";
		this.fund_code = "0";
		this.npv = "1.0";
		
	}

	/** 
	 * Returns the fund_code.
	 * @return String
	 */
	public String getFund_code() {
		return fund_code;
	}

	/** 
	 * Set the fund_code.
	 * @param fund_code The fund_code to set
	 */
	public void setFund_code(String fund_code) {
		this.fund_code = fund_code;
	}

	/** 
	 * Returns the count.
	 * @return String
	 */
	public String getCount() {
		return count;
	}

	/** 
	 * Set the count.
	 * @param count The count to set
	 */
	public void setCount(String count) {
		this.count = count;
	}

	/** 
	 * Returns the npv.
	 * @return String
	 */
	public String getNpv() {
		return npv;
	}

	/** 
	 * Set the npv.
	 * @param npv The npv to set
	 */
	public void setNpv(String npv) {
		this.npv = npv;
	}

	/** 
	 * Returns the comment.
	 * @return String
	 */
	public String getComment() {
		return comment;
	}

	/** 
	 * Set the comment.
	 * @param comment The comment to set
	 */
	public void setComment(String comment) {
		this.comment = comment;
	}
}