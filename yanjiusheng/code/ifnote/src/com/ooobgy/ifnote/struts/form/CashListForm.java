/*
 * Generated by MyEclipse Struts
 * Template path: templates/java/JavaClass.vtl
 */
package com.ooobgy.ifnote.struts.form;

import java.sql.Timestamp;
import java.util.List;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpSession;

import org.apache.struts.action.ActionErrors;
import org.apache.struts.action.ActionForm;
import org.apache.struts.action.ActionMapping;
import org.apache.struts.action.ActionMessage;

import com.ooobgy.ifnote.constants.SecretKey;
import com.ooobgy.ifnote.dbctrler.dao.Inote_CashDao;
import com.ooobgy.ifnote.dbctrler.daoimpl.Inote_CashDaoImpl;
import com.ooobgy.ifnote.entity.Inote_Cash;
import com.ooobgy.ifnote.entity.User;

/**
 * MyEclipse Struts Creation date: 08-22-2011
 * 
 * XDoclet definition:
 * 
 * @struts.form name="cashListForm"
 */
public class CashListForm extends ActionForm {
	/*
	 * Generated fields
	 */

	/**
	 * 
	 */
	private static final long serialVersionUID = -8209354509727124377L;

	/** startTime property */
	private String startTime;

	/** endTime property */
	private String endTime;

	private List<Inote_Cash> inote_Cashs;

	/**
	 * Method validate
	 * 
	 * @param mapping
	 * @param request
	 * @return ActionErrors
	 */
	public ActionErrors validate(ActionMapping mapping,
			HttpServletRequest request) {
//		HttpSession session = request.getSession();
		ActionErrors errors = new ActionErrors();
		ActionMessage actionMessage = new ActionMessage("list");
		errors.add("list", actionMessage);
		
		reset(mapping, request);
		
		return errors;
	}

	/**
	 * Method reset
	 * 
	 * @param mapping
	 * @param request
	 */
	public void reset(ActionMapping mapping, HttpServletRequest request) {
		HttpSession session = request.getSession();
		User user = (User) session.getAttribute(SecretKey.USER_KEY);
//		startTime = (String) session.getAttribute("list_startTime");
//		endTime = (String) session.getAttribute("list_endTime");
		System.out.println("start:" + startTime);
		Inote_CashDao dao = new Inote_CashDaoImpl();
		if (startTime != null && endTime != null
				&& startTime.length() > 1 && endTime.length() > 1) {
			inote_Cashs = dao.findAllWithUidTime(user.getId(), Timestamp
					.valueOf(startTime), Timestamp.valueOf(endTime));
		} else {
			inote_Cashs = dao.findAllWithUid(user.getId());
			startTime = "";
			endTime = "";
		}
		session.removeAttribute("list_startTime");
		session.removeAttribute("list_endTime");
		
		super.reset(mapping, request);
	}

	/**
	 * Returns the startTime.
	 * 
	 * @return String
	 */
	public String getStartTime() {
		return startTime;
	}

	/**
	 * Set the startTime.
	 * 
	 * @param startTime
	 *            The startTime to set
	 */
	public void setStartTime(String startTime) {
		this.startTime = startTime;
	}

	/**
	 * Returns the endTime.
	 * 
	 * @return String
	 */
	public String getEndTime() {
		return endTime;
	}

	/**
	 * Set the endTime.
	 * 
	 * @param endTime
	 *            The endTime to set
	 */
	public void setEndTime(String endTime) {
		this.endTime = endTime;
	}

	/**
	 * @return the inote_Cashs
	 */
	public List<Inote_Cash> getInote_Cashs() {
		return inote_Cashs;
	}

	/**
	 * @param inoteCashs
	 *            the inote_Cashs to set
	 */
	public void setInote_Cashs(List<Inote_Cash> inoteCashs) {
		inote_Cashs = inoteCashs;
	}
}